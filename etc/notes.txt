
-------------------usestate for nav--------------------
  //setting what shows for the nav bar
  //only takes single argument
  const [showNav, setShowNav] = useState([]);
  const [currentPage, setCurrentPage] = useState()

  useEffect(() => {
    if (currentPage === '/PastFlowers') {
      setShowNav(['/Create', '/Global'])
    } else if (currentPage === '/Global') {
      setShowNav(['/Create', '/PastFlowers'])
    } else if (currentPage === '/Create') {
      setShowNav(['/Global', '/PastFlowers'])
    }
  });


  //-----------from app.js--------------//
   // const [googleUser, setGoogleUser] = useState()
  //useEffect to get if user exists/signed in, then pull info from database based on what user is signed in
  //useeffect will ping db then send back info on what user is logged in

  // function googleLogin(props) {
  //   firebaseApp
  //     .auth()
  //     .signInWithPopup(googleProvider)
  //     .then((result) => {
  //       // /** @type {firebase.auth.OAuthCredential} */
  //       const credential = result.credential;

  //       // This gives you a Google Access Token. You can use it to access the Google API.
  //       const token = credential.accessToken;
  //       // The signed-in user info.
  //       const user = result.user;
  //       // ...
  //     })
  //     .catch((error) => {
  //       // Handle Errors here.
  //       const errorCode = error.code;
  //       const errorMessage = error.message;
  //       // The email of the user's account used.
  //       const email = error.email;
  //       // The firebase.auth.AuthCredential type that was used.
  //       const credential = error.credential;
  //     });
    //you get firebase.auth().currentUser -- keeps the user signed in, if no user - is null. you can call this anywhere firebase is imported!!! just use firebase.auth().currentUser: use as stateful property in components that need auth



  // const [colorPicked, setColorPicked] = useState("yellow");




  // const handleColor = (evt) => {
  //   // setColorPicked({fill: color.hex})
  //   setColorPicked(evt.target.value);
  //   // setPeaksPetal(evt.target.value);
  // };

  // const handleColorChange = (color, evt) => {
  //   setColorPicked(color.hex);
  //   setPeaksPetal(color.hex);
  //   console.log(color.hex);
  // };


    // -------in petal modal------------
      function handleNextQuestion(evt) {
    // let petalArray = petal
    setSaveChange(evt.target.value);

    let nextQuestion = chosen += 1;
    while (nextQuestion < 5) {
      setChosen(nextQuestion);
    } if (nextQuestion === 5) {
      setChosen(chosen[5]);
    } else if (nextQuestion > 5) {
      setModalIsOpen(false);
      <Redirect to="/PastFlowers" />;
    }
  }